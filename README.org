#+title TicTacToe
#+startup: inlineimages

* Projekt beskriving
** TicTacToe 19/8-22
*** Inledning
**** Vad är det för projekt?
Vi ska skriva ett TicTacToe spel, först lokalt sedan när det är färdigt så implementerar vi en server och klient så man kan köra mot varandra online så att man inte ska behöva spela på samma dator.

**** Vad använder vi oss av?
Vi har valt att använda C++ som språk och Emacs som Emacs-Lisp interpreter(Den tar Emacs-Lisp kod och kör den, mer info om vad en intrepreter finns [[https://sv.wikipedia.org/wiki/Interpretator][här]] och info om Emacs finns [[https://sv.wikipedia.org/wiki/Emacs][här]]), och vi använder biblioteket SDL2 för grafiskt gränssnitt annars kommer vi använda std(standard) biblioteken i c++ kompileraren g++(Gjord av Richard Stallman i projektet GNU, mer info här om [[https://sv.wikipedia.org/wiki/Richard_Stallman][Richard Stallman]] och [[https://sv.wikipedia.org/wiki/GNU_Compiler_Collection][gcc/g++]] g++ är med i gcc).

**** Vad är var och annan person i detta projekt?
Fredrik Thell är projektledare och jag Elis Odenhage är huvudprogrammerare.

*** Flödesschema
#+ATTR_ORG: :width 600
[[file:Assets/projektplanFlödesschema.png]]

* Loggbok
** Vecka 34
*** 22/8-22
Jag började med att göra ett simpelt hello world program som bara skriver ut hello world.
Sedan så fixade Fredrik Projektplan/Flödesschemat. [[https://github.com/Mastergamer433/TicTacToe/commit/c226581244306cdf1759d91cf31096cd5989050c][Commiten för flödeschemat]] [[file:README.org::17][här]] finns det.
Sedan fixade jag en klass som lagrar input och bräde bland annat, en loop som skriver ut brädet och som tar input och lägger det i in variabeln. [[https://github.com/Mastergamer433/TicTacToe/commit/727fb485565e110df275647429b0a54c24fafb34][Commiten för det]].

*** 23/8-22
Jag implementerade vems tur det är och skrev ut det varje gång loopen körs. [[https://github.com/Mastergamer433/TicTacToe/commit/45e34a41cfa0fc7ba162448f5cba30352e215b7d][Här är commiten fär det]].
Sedan implementerade jag en move funktion som inte gjorde något men returnerade ett värde, 0, sedan kollar den efter errors och om där finns ett error så skriver den ut det. [[https://github.com/Mastergamer433/TicTacToe/commit/ddfa0c5a4f0483dd155f41fe125816a3ece14e30][Commiten för det finns här]].
Sen fixade jag bättre hantering av felmeddelanden och att man kan göra ett drag. [[https://github.com/Mastergamer433/TicTacToe/commit/2bf83e83e84a603b803f5066f14b10ea390236d3][Commmiten]].
Efter det fixade jag systemet för att kompilera. [[https://github.com/Mastergamer433/TicTacToe/commit/492de3d8cd42c62988c5828b7e791fa3861f8cfa][här]].
Efter att jag fixade det så märskte jag att det inte funkar, men jag är för dålig på make för att veta vad som är problemet, så jag kontaktade en person på discord vid användarnamn TehBoss som hjälpte mig med det, så jag kan kompilera och köra på ett smidigare sätt. [[https://github.com/Mastergamer433/TicTacToe/commit/6a694a92a0b4395f2f91b2641ebd7110328da987][Här är den commiten]].
Sen så fixade jag lite fil struktur, så man kan arbeta med koden. [[https://github.com/Mastergamer433/TicTacToe/commit/adf06ca4d15d6b4286189d7cf6cd2fe23c9bb3c9][Här finns commiten för det]].
Sedan skapade jag bara en tom fil som heter .gitignore och används av git, allting i den kommer den ignorera asså det kommer inte finnas i git repositoryn. [[https://github.com/Mastergamer433/TicTacToe/commit/e5cafcb91637789655e4918e0cdd06de4af2a796][här är det]].
Sedan fixade jag så den ignorerar alla kompilerade filer och så för det är rätt onödigt. [[https://github.com/Mastergamer433/TicTacToe/commit/4589953a13b7b231b1a59dfed0a6bb1a4e421aab][Här finns den commiten]].
Och efter det så lade jag till så den inte skulle ta med alla autosave filer som emacs har. Det är de som heter <namn på fil>~. [[https://github.com/Mastergamer433/TicTacToe/commit/26518fa712a256d3129bccdd42352cafd83edb8b][Här är den commiten]].

*** 25/8-22
[[https://github.com/Mastergamer433/TicTacToe/commit/e81395dd95a450cf719c9c1aad8ed75cb94b9aec][Här]] fixade jag en funktion som kollar om någon har vunnit.
Om någon vinner så kallar den på funktionen won [[https://github.com/Mastergamer433/TicTacToe/commit/9a7106e979d20a17969646faddaca21e7b958d9e][här]].
[[https://github.com/Mastergamer433/TicTacToe/commit/17ece1198b6ebf7825cae610cb9beb224e80de5d][Här]] lägger jag till alla bräden som är vinster.
[[https://github.com/Mastergamer433/TicTacToe/commit/14128c90d75c0a754410af1393974b586ac38a17][Här]] lade jag till kod för att kolla om någon har vunnit, men den funkar inte så bra så jag tar hjälp av olika personer i en discord server jag är med i.
Sedan tog jag bort filer som inte behövs(Emacs's auto save filer.).
[[https://github.com/Mastergamer433/TicTacToe/commit/7831360feac27b8c9d8fb34b79b5160832a820de][Här]] bytte jag ut sättet att kolla vinst.
Sedan ändrar jag om vilken spelare det är genom att kolla om det är X och i så fall ska det bli O annars ska det bli X [[https://github.com/Mastergamer433/TicTacToe/commit/6f328b7cb6be7bb582e7b61b8a4147f2d6cc62a7][här]].
[[https://github.com/Mastergamer433/TicTacToe/commit/2bb16483ed78ffedb2b501515987efd407475173][Här]] kan du nu få oavgjort där den loopar igenom hela brädet och kollar om den hittar en plats där det finns något och i så fall plusa på en variabel med 1 sedan när den är färdig så kollar den om den variabeln är 9, det borde den ju vara om vi har ett bräde 3x3 och det är fullt och varje gång den hittar en icke tom så plusar den på med 1, så är det ju oavgjort.
[[https://github.com/Mastergamer433/TicTacToe/commit/98ec049332c65f01ad6639f46103a921bb97b43c][Här]] kan du göra ett drag online.

** Vecka 35
Jag började med att fixa lite med submodules för att all source control och kompilering och saker ska bli enklare, så jag började med submodules och gick sedan till kmpilering och grejer.

Senare skrev jag kod för att skicka saker mellan server och klient och lyckas med lite hjälp av TehBoss(igen) på DC.

** Vecka 36
Denna vecka har mer varit att konfigurera upp ett gött workflow för mig, jag har t.ex börjat använda ett annat tema i emacs för att det ska vara mindre ansträngande för ögonen.

Jag har även börjat konfigurera org mode(det jag använder för att t.ex skriva detta dokumentet), så saker ska bli mer enkelt och organiserat osv, för att jag inte ska ha tusen dokument överallt jag inte vet vad som är vad o grejer. Utan allt ska vara keyboard driven och jag ska ha struktur på dokument och sådant så jag inte behöver tänka på vart saker finns utan att bara typ CTRL+x CTRL+c m är email och CTRL+x CTRL+c g t är global todo list(att göra lista, men filen heter TODO.org) och CTRL+c CTRL+c l t ät local todo list(samma som innan men denna är lokal asså i detta fallet projekt vis, så min globala kanske jag har saker om vilka projekt jag ska hålla på med osv, men den lokala är typ "Jag ska lägga till detta i detta projektet")
. Detta kommer göra saker så mycket enklare.

For reference, så här såg emacs ut förut(skit i alla errors, det gör inget just nu):
#+attr_html: :width 600
[[file:Assets/EmacsOldLook.png]]

och såhär ser det ut nu:
#+attr_html: :width 600
[[file:Assets/EmacsNewLook.png]]

Så det är väl typ det jag har gjort.

** Vecka 37
Jag arkiverar projektet. Varför ser du i "Arkivering" headern i den här filen.

* Sammanfattning
** Början
Jag började med att göra ett simpelt hello world program som bara skriver ut hello world.
Sedan så fixade Fredrik Projektplan/Flödesschemat. [[https://github.com/Mastergamer433/TicTacToe/commit/c226581244306cdf1759d91cf31096cd5989050c][Commiten för flödeschemat]] [[file:README.org::17][här]] finns det.

** Mitten
Jag fixade lite med submodules för att all source control och kompilering och saker ska bli enklare

Senare skrev jag kod för att skicka saker mellan server och klient och lyckas med lite hjälp av TehBoss(igen) på DC.
Jag använde då först lite boiler-plate(Bara en template, någonstans att börja eller det mest basic så man inte behöver skriva det basic sakerna för varje projekt hela tiden) code för networking från geeksforgeeks.com.

** Slutet
*** Basic förklaring
Allting funkar till jag ska lägga till att man ska kunna göra ett move, då allting bara slutar fungera. Så som händer är HELT omöjligt(om man använder TCP/IP som jag och inte UDP/IP) och då blev jag bara så confused så jag orkade inte med det mer.
*** Hur TCP/IP och grejer fungerar
TCP/IP ser ut lite såhär:

                    filestream
SERVER <-------------> CLIENT
så om klienten skickar "Hej" så skrivs det i en stream och servern kan läsa det närsom, det är precis som att du kan skriva en bok men läsaren måste inte läsa det du skriver exakt samtidigt som du skriver det, för texten kommer ju inte bara magiskt försvinna ur boken.

En filestream ser ut ungefär såhär:

Program <--> fil.txt

<--> delen som är själva stream är typ

innhåll i filen:
content
mer content

och det kommer sedan skrivas i streamen och se ut så här:
fil.txt 0:0(c) ----> filestream
fil.txt 0:1(o) ----> filestream
osv
och sedan:
fil.txt 0:6(t) -----> filestream
men sedan kommer denna
fil.txt 0:7(\n)----> filestream

där \n betyder ny linje
och sedan fortsätter den så
så till slut så ser streamen ungefär ut såhär

content\nmer content

och sedan läser programmet detta.

Ungefär på detta sättet fungerar en filestream.

Så när det är tcp/ip så är det ingen fil som skrivs i streamen utan istället text som någon skickar.

* Arkivering
Jag arkiverar detta projekt då jag inte fattar vad fan som händer.

Networking funkar inte så som händer. Jag har en kompis som är utbildad ccna någonting som inte fattar vad fan jag har skapat för monster.

Jag tror inte någon skulle kunna fixa detta, och speciellt inte jag, så jag kommer att arkivera detta projekt.

* Nytt
I det här projektet har vi dokumenterat, för att andra som inte är med i projektet ska fatta vad vi har sysslat med.
Dokumentation är bra i grund och botten men eftersom vi har skrivit den på svenska, vilket knappt ens en tiondel av sveriges befolking kan prata, läsa eller skriva. Medan typ hela världen fattar engelska, så det bör skrivas på engelska.

